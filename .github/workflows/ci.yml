name: Article Service and PostgreSQL CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Build
      run: go build -o bin/notelify-articles-service
      

  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: pass1234
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Run tests
      run: ENV=development_test go test -v ./...

  build-and-push-docker:
    runs-on: ubuntu-latest

    needs: [test]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: docker build -t antonyinjila/notelify-articles-service:latest --build-arg ENV=docker .
    - name: Docker push
      run: docker push antonyinjila/notelify-articles-service:latest
        


  # deploy:
  #   runs-on: ubuntu-latest

  #   needs: [build-and-push-docker]

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Set up Go
  #     uses: actions/setup-go@v2
  #     with:
  #       go-version: 1.17

  #   - name: Deploy to production
  #     run: ./bin/my-web-server
  #     env:
  #       DATABASE_URL: postgres://myuser:mypassword@localhost:5432/mydatabase
